// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tsm.proto
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_tsm_2eproto__INCLUDED
#define GRPC_tsm_2eproto__INCLUDED

#include "tsm.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace tsm {

// The joining service definition.
class TinySocialMedia final {
 public:
  static constexpr char const* service_full_name() {
    return "tsm.TinySocialMedia";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sends a greeting
    virtual ::grpc::Status joinServer(::grpc::ClientContext* context, const ::tsm::UserName& request, ::tsm::UserId* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsm::UserId>> AsyncjoinServer(::grpc::ClientContext* context, const ::tsm::UserName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsm::UserId>>(AsyncjoinServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsm::UserId>> PrepareAsyncjoinServer(::grpc::ClientContext* context, const ::tsm::UserName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsm::UserId>>(PrepareAsyncjoinServerRaw(context, request, cq));
    }
    virtual ::grpc::Status follow(::grpc::ClientContext* context, const ::tsm::FollowCommand& request, ::tsm::GeneralStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsm::GeneralStatus>> Asyncfollow(::grpc::ClientContext* context, const ::tsm::FollowCommand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsm::GeneralStatus>>(AsyncfollowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsm::GeneralStatus>> PrepareAsyncfollow(::grpc::ClientContext* context, const ::tsm::FollowCommand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsm::GeneralStatus>>(PrepareAsyncfollowRaw(context, request, cq));
    }
    virtual ::grpc::Status unfollow(::grpc::ClientContext* context, const ::tsm::UnfollowCommand& request, ::tsm::GeneralStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsm::GeneralStatus>> Asyncunfollow(::grpc::ClientContext* context, const ::tsm::UnfollowCommand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsm::GeneralStatus>>(AsyncunfollowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsm::GeneralStatus>> PrepareAsyncunfollow(::grpc::ClientContext* context, const ::tsm::UnfollowCommand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsm::GeneralStatus>>(PrepareAsyncunfollowRaw(context, request, cq));
    }
    virtual ::grpc::Status listUsers(::grpc::ClientContext* context, const ::tsm::UserId& request, ::tsm::ListReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsm::ListReply>> AsynclistUsers(::grpc::ClientContext* context, const ::tsm::UserId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsm::ListReply>>(AsynclistUsersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsm::ListReply>> PrepareAsynclistUsers(::grpc::ClientContext* context, const ::tsm::UserId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsm::ListReply>>(PrepareAsynclistUsersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::tsm::ClientPost, ::tsm::ServerPost>> timeline(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::tsm::ClientPost, ::tsm::ServerPost>>(timelineRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::tsm::ClientPost, ::tsm::ServerPost>> Asynctimeline(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::tsm::ClientPost, ::tsm::ServerPost>>(AsynctimelineRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::tsm::ClientPost, ::tsm::ServerPost>> PrepareAsynctimeline(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::tsm::ClientPost, ::tsm::ServerPost>>(PrepareAsynctimelineRaw(context, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tsm::UserId>* AsyncjoinServerRaw(::grpc::ClientContext* context, const ::tsm::UserName& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tsm::UserId>* PrepareAsyncjoinServerRaw(::grpc::ClientContext* context, const ::tsm::UserName& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tsm::GeneralStatus>* AsyncfollowRaw(::grpc::ClientContext* context, const ::tsm::FollowCommand& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tsm::GeneralStatus>* PrepareAsyncfollowRaw(::grpc::ClientContext* context, const ::tsm::FollowCommand& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tsm::GeneralStatus>* AsyncunfollowRaw(::grpc::ClientContext* context, const ::tsm::UnfollowCommand& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tsm::GeneralStatus>* PrepareAsyncunfollowRaw(::grpc::ClientContext* context, const ::tsm::UnfollowCommand& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tsm::ListReply>* AsynclistUsersRaw(::grpc::ClientContext* context, const ::tsm::UserId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tsm::ListReply>* PrepareAsynclistUsersRaw(::grpc::ClientContext* context, const ::tsm::UserId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::tsm::ClientPost, ::tsm::ServerPost>* timelineRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::tsm::ClientPost, ::tsm::ServerPost>* AsynctimelineRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::tsm::ClientPost, ::tsm::ServerPost>* PrepareAsynctimelineRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status joinServer(::grpc::ClientContext* context, const ::tsm::UserName& request, ::tsm::UserId* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsm::UserId>> AsyncjoinServer(::grpc::ClientContext* context, const ::tsm::UserName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsm::UserId>>(AsyncjoinServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsm::UserId>> PrepareAsyncjoinServer(::grpc::ClientContext* context, const ::tsm::UserName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsm::UserId>>(PrepareAsyncjoinServerRaw(context, request, cq));
    }
    ::grpc::Status follow(::grpc::ClientContext* context, const ::tsm::FollowCommand& request, ::tsm::GeneralStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsm::GeneralStatus>> Asyncfollow(::grpc::ClientContext* context, const ::tsm::FollowCommand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsm::GeneralStatus>>(AsyncfollowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsm::GeneralStatus>> PrepareAsyncfollow(::grpc::ClientContext* context, const ::tsm::FollowCommand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsm::GeneralStatus>>(PrepareAsyncfollowRaw(context, request, cq));
    }
    ::grpc::Status unfollow(::grpc::ClientContext* context, const ::tsm::UnfollowCommand& request, ::tsm::GeneralStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsm::GeneralStatus>> Asyncunfollow(::grpc::ClientContext* context, const ::tsm::UnfollowCommand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsm::GeneralStatus>>(AsyncunfollowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsm::GeneralStatus>> PrepareAsyncunfollow(::grpc::ClientContext* context, const ::tsm::UnfollowCommand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsm::GeneralStatus>>(PrepareAsyncunfollowRaw(context, request, cq));
    }
    ::grpc::Status listUsers(::grpc::ClientContext* context, const ::tsm::UserId& request, ::tsm::ListReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsm::ListReply>> AsynclistUsers(::grpc::ClientContext* context, const ::tsm::UserId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsm::ListReply>>(AsynclistUsersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsm::ListReply>> PrepareAsynclistUsers(::grpc::ClientContext* context, const ::tsm::UserId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsm::ListReply>>(PrepareAsynclistUsersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::tsm::ClientPost, ::tsm::ServerPost>> timeline(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::tsm::ClientPost, ::tsm::ServerPost>>(timelineRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::tsm::ClientPost, ::tsm::ServerPost>> Asynctimeline(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::tsm::ClientPost, ::tsm::ServerPost>>(AsynctimelineRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::tsm::ClientPost, ::tsm::ServerPost>> PrepareAsynctimeline(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::tsm::ClientPost, ::tsm::ServerPost>>(PrepareAsynctimelineRaw(context, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::tsm::UserId>* AsyncjoinServerRaw(::grpc::ClientContext* context, const ::tsm::UserName& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tsm::UserId>* PrepareAsyncjoinServerRaw(::grpc::ClientContext* context, const ::tsm::UserName& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tsm::GeneralStatus>* AsyncfollowRaw(::grpc::ClientContext* context, const ::tsm::FollowCommand& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tsm::GeneralStatus>* PrepareAsyncfollowRaw(::grpc::ClientContext* context, const ::tsm::FollowCommand& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tsm::GeneralStatus>* AsyncunfollowRaw(::grpc::ClientContext* context, const ::tsm::UnfollowCommand& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tsm::GeneralStatus>* PrepareAsyncunfollowRaw(::grpc::ClientContext* context, const ::tsm::UnfollowCommand& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tsm::ListReply>* AsynclistUsersRaw(::grpc::ClientContext* context, const ::tsm::UserId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tsm::ListReply>* PrepareAsynclistUsersRaw(::grpc::ClientContext* context, const ::tsm::UserId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::tsm::ClientPost, ::tsm::ServerPost>* timelineRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::tsm::ClientPost, ::tsm::ServerPost>* AsynctimelineRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::tsm::ClientPost, ::tsm::ServerPost>* PrepareAsynctimelineRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_joinServer_;
    const ::grpc::internal::RpcMethod rpcmethod_follow_;
    const ::grpc::internal::RpcMethod rpcmethod_unfollow_;
    const ::grpc::internal::RpcMethod rpcmethod_listUsers_;
    const ::grpc::internal::RpcMethod rpcmethod_timeline_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sends a greeting
    virtual ::grpc::Status joinServer(::grpc::ServerContext* context, const ::tsm::UserName* request, ::tsm::UserId* response);
    virtual ::grpc::Status follow(::grpc::ServerContext* context, const ::tsm::FollowCommand* request, ::tsm::GeneralStatus* response);
    virtual ::grpc::Status unfollow(::grpc::ServerContext* context, const ::tsm::UnfollowCommand* request, ::tsm::GeneralStatus* response);
    virtual ::grpc::Status listUsers(::grpc::ServerContext* context, const ::tsm::UserId* request, ::tsm::ListReply* response);
    virtual ::grpc::Status timeline(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::tsm::ServerPost, ::tsm::ClientPost>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_joinServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_joinServer() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_joinServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status joinServer(::grpc::ServerContext* context, const ::tsm::UserName* request, ::tsm::UserId* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestjoinServer(::grpc::ServerContext* context, ::tsm::UserName* request, ::grpc::ServerAsyncResponseWriter< ::tsm::UserId>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_follow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_follow() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_follow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status follow(::grpc::ServerContext* context, const ::tsm::FollowCommand* request, ::tsm::GeneralStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestfollow(::grpc::ServerContext* context, ::tsm::FollowCommand* request, ::grpc::ServerAsyncResponseWriter< ::tsm::GeneralStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_unfollow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_unfollow() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_unfollow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unfollow(::grpc::ServerContext* context, const ::tsm::UnfollowCommand* request, ::tsm::GeneralStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestunfollow(::grpc::ServerContext* context, ::tsm::UnfollowCommand* request, ::grpc::ServerAsyncResponseWriter< ::tsm::GeneralStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_listUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_listUsers() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_listUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status listUsers(::grpc::ServerContext* context, const ::tsm::UserId* request, ::tsm::ListReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestlistUsers(::grpc::ServerContext* context, ::tsm::UserId* request, ::grpc::ServerAsyncResponseWriter< ::tsm::ListReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_timeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_timeline() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_timeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status timeline(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::tsm::ServerPost, ::tsm::ClientPost>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requesttimeline(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::tsm::ServerPost, ::tsm::ClientPost>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(4, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_joinServer<WithAsyncMethod_follow<WithAsyncMethod_unfollow<WithAsyncMethod_listUsers<WithAsyncMethod_timeline<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_joinServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_joinServer() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_joinServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status joinServer(::grpc::ServerContext* context, const ::tsm::UserName* request, ::tsm::UserId* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_follow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_follow() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_follow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status follow(::grpc::ServerContext* context, const ::tsm::FollowCommand* request, ::tsm::GeneralStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_unfollow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_unfollow() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_unfollow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unfollow(::grpc::ServerContext* context, const ::tsm::UnfollowCommand* request, ::tsm::GeneralStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_listUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_listUsers() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_listUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status listUsers(::grpc::ServerContext* context, const ::tsm::UserId* request, ::tsm::ListReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_timeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_timeline() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_timeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status timeline(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::tsm::ServerPost, ::tsm::ClientPost>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_joinServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_joinServer() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::tsm::UserName, ::tsm::UserId>(std::bind(&WithStreamedUnaryMethod_joinServer<BaseClass>::StreamedjoinServer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_joinServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status joinServer(::grpc::ServerContext* context, const ::tsm::UserName* request, ::tsm::UserId* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedjoinServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tsm::UserName,::tsm::UserId>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_follow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_follow() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::tsm::FollowCommand, ::tsm::GeneralStatus>(std::bind(&WithStreamedUnaryMethod_follow<BaseClass>::Streamedfollow, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_follow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status follow(::grpc::ServerContext* context, const ::tsm::FollowCommand* request, ::tsm::GeneralStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedfollow(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tsm::FollowCommand,::tsm::GeneralStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_unfollow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_unfollow() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::tsm::UnfollowCommand, ::tsm::GeneralStatus>(std::bind(&WithStreamedUnaryMethod_unfollow<BaseClass>::Streamedunfollow, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_unfollow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status unfollow(::grpc::ServerContext* context, const ::tsm::UnfollowCommand* request, ::tsm::GeneralStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedunfollow(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tsm::UnfollowCommand,::tsm::GeneralStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_listUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_listUsers() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::tsm::UserId, ::tsm::ListReply>(std::bind(&WithStreamedUnaryMethod_listUsers<BaseClass>::StreamedlistUsers, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_listUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status listUsers(::grpc::ServerContext* context, const ::tsm::UserId* request, ::tsm::ListReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedlistUsers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tsm::UserId,::tsm::ListReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_joinServer<WithStreamedUnaryMethod_follow<WithStreamedUnaryMethod_unfollow<WithStreamedUnaryMethod_listUsers<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_joinServer<WithStreamedUnaryMethod_follow<WithStreamedUnaryMethod_unfollow<WithStreamedUnaryMethod_listUsers<Service > > > > StreamedService;
};

}  // namespace tsm


#endif  // GRPC_tsm_2eproto__INCLUDED
