// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tsm.proto

#include "tsm.pb.h"
#include "tsm.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace tsm {

static const char* TinySocialMedia_method_names[] = {
  "/tsm.TinySocialMedia/joinServer",
  "/tsm.TinySocialMedia/follow",
  "/tsm.TinySocialMedia/unfollow",
  "/tsm.TinySocialMedia/listUsers",
  "/tsm.TinySocialMedia/timeline",
};

std::unique_ptr< TinySocialMedia::Stub> TinySocialMedia::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< TinySocialMedia::Stub> stub(new TinySocialMedia::Stub(channel));
  return stub;
}

TinySocialMedia::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_joinServer_(TinySocialMedia_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_follow_(TinySocialMedia_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_unfollow_(TinySocialMedia_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_listUsers_(TinySocialMedia_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_timeline_(TinySocialMedia_method_names[4], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status TinySocialMedia::Stub::joinServer(::grpc::ClientContext* context, const ::tsm::UserName& request, ::tsm::UserId* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_joinServer_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tsm::UserId>* TinySocialMedia::Stub::AsyncjoinServerRaw(::grpc::ClientContext* context, const ::tsm::UserName& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tsm::UserId>::Create(channel_.get(), cq, rpcmethod_joinServer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tsm::UserId>* TinySocialMedia::Stub::PrepareAsyncjoinServerRaw(::grpc::ClientContext* context, const ::tsm::UserName& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tsm::UserId>::Create(channel_.get(), cq, rpcmethod_joinServer_, context, request, false);
}

::grpc::Status TinySocialMedia::Stub::follow(::grpc::ClientContext* context, const ::tsm::FollowCommand& request, ::tsm::GeneralStatus* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_follow_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tsm::GeneralStatus>* TinySocialMedia::Stub::AsyncfollowRaw(::grpc::ClientContext* context, const ::tsm::FollowCommand& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tsm::GeneralStatus>::Create(channel_.get(), cq, rpcmethod_follow_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tsm::GeneralStatus>* TinySocialMedia::Stub::PrepareAsyncfollowRaw(::grpc::ClientContext* context, const ::tsm::FollowCommand& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tsm::GeneralStatus>::Create(channel_.get(), cq, rpcmethod_follow_, context, request, false);
}

::grpc::Status TinySocialMedia::Stub::unfollow(::grpc::ClientContext* context, const ::tsm::UnfollowCommand& request, ::tsm::GeneralStatus* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_unfollow_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tsm::GeneralStatus>* TinySocialMedia::Stub::AsyncunfollowRaw(::grpc::ClientContext* context, const ::tsm::UnfollowCommand& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tsm::GeneralStatus>::Create(channel_.get(), cq, rpcmethod_unfollow_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tsm::GeneralStatus>* TinySocialMedia::Stub::PrepareAsyncunfollowRaw(::grpc::ClientContext* context, const ::tsm::UnfollowCommand& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tsm::GeneralStatus>::Create(channel_.get(), cq, rpcmethod_unfollow_, context, request, false);
}

::grpc::Status TinySocialMedia::Stub::listUsers(::grpc::ClientContext* context, const ::tsm::UserId& request, ::tsm::ListReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_listUsers_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tsm::ListReply>* TinySocialMedia::Stub::AsynclistUsersRaw(::grpc::ClientContext* context, const ::tsm::UserId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tsm::ListReply>::Create(channel_.get(), cq, rpcmethod_listUsers_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tsm::ListReply>* TinySocialMedia::Stub::PrepareAsynclistUsersRaw(::grpc::ClientContext* context, const ::tsm::UserId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tsm::ListReply>::Create(channel_.get(), cq, rpcmethod_listUsers_, context, request, false);
}

::grpc::ClientReaderWriter< ::tsm::ClientPost, ::tsm::ServerPost>* TinySocialMedia::Stub::timelineRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::tsm::ClientPost, ::tsm::ServerPost>::Create(channel_.get(), rpcmethod_timeline_, context);
}

::grpc::ClientAsyncReaderWriter< ::tsm::ClientPost, ::tsm::ServerPost>* TinySocialMedia::Stub::AsynctimelineRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::tsm::ClientPost, ::tsm::ServerPost>::Create(channel_.get(), cq, rpcmethod_timeline_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::tsm::ClientPost, ::tsm::ServerPost>* TinySocialMedia::Stub::PrepareAsynctimelineRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::tsm::ClientPost, ::tsm::ServerPost>::Create(channel_.get(), cq, rpcmethod_timeline_, context, false, nullptr);
}

TinySocialMedia::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TinySocialMedia_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TinySocialMedia::Service, ::tsm::UserName, ::tsm::UserId>(
          std::mem_fn(&TinySocialMedia::Service::joinServer), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TinySocialMedia_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TinySocialMedia::Service, ::tsm::FollowCommand, ::tsm::GeneralStatus>(
          std::mem_fn(&TinySocialMedia::Service::follow), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TinySocialMedia_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TinySocialMedia::Service, ::tsm::UnfollowCommand, ::tsm::GeneralStatus>(
          std::mem_fn(&TinySocialMedia::Service::unfollow), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TinySocialMedia_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TinySocialMedia::Service, ::tsm::UserId, ::tsm::ListReply>(
          std::mem_fn(&TinySocialMedia::Service::listUsers), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TinySocialMedia_method_names[4],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< TinySocialMedia::Service, ::tsm::ClientPost, ::tsm::ServerPost>(
          std::mem_fn(&TinySocialMedia::Service::timeline), this)));
}

TinySocialMedia::Service::~Service() {
}

::grpc::Status TinySocialMedia::Service::joinServer(::grpc::ServerContext* context, const ::tsm::UserName* request, ::tsm::UserId* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TinySocialMedia::Service::follow(::grpc::ServerContext* context, const ::tsm::FollowCommand* request, ::tsm::GeneralStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TinySocialMedia::Service::unfollow(::grpc::ServerContext* context, const ::tsm::UnfollowCommand* request, ::tsm::GeneralStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TinySocialMedia::Service::listUsers(::grpc::ServerContext* context, const ::tsm::UserId* request, ::tsm::ListReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TinySocialMedia::Service::timeline(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::tsm::ServerPost, ::tsm::ClientPost>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace tsm

